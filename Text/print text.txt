#include <fstream>
#include <iostream>
#include <stdlib.h>

#ifdef _APPLE_
#include <OpenGL/OpenGL.h>
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
using namespace std;

void init() {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glMatrixMode(GLUT_SINGLE | GLUT_RGB);
	glLoadIdentity();
	glOrtho(-90.0, 100.0, -15.0, 100.0, 0.0, -15.0);
}

void renderbitmap(float x, float y, void *font, char *string) {
	char *c;
	glRasterPos2f(x, y);
	c = string;
	float u = glutStrokeWidth(font, (int)*c); cout << u << endl;
	glPushMatrix();
	glTranslatef(x-50, y + 50,0);
	glScalef(1.0f, -1.08f,  -14);
	for (c = string; *c != '\0'; c++) {
		//glScalef(0, 0, -3);
		//glutBitmapCharacter(font, (int)*c);
		glutStrokeCharacter(font, (int)*c);
	}
	glPopMatrix();
}

void introscreen() {
	glColor3f(1.0f, 1.0f, 0.0f);
	char buf[1000] = { 0 };
	/*sprintf_s(buf, "Hello World");
	renderbitmap(0, 40, GLUT_BITMAP_TIMES_ROMAN_24, buf);
	sprintf_s(buf, "hihhhh");//buf[2]=\0;buf[3]=l;
	renderbitmap(0, 20, GLUT_BITMAP_TIMES_ROMAN_10, buf);
	*/
	sprintf_s(buf, "kk");//buf[2]=\0;buf[3]=l;
	renderbitmap(0, 50, GLUT_STROKE_ROMAN, buf);
	sprintf_s(buf, "ll");//buf[2]=\0;buf[3]=l;
	//renderbitmap(0, 20, GLUT_STROKE_ROMAN, buf);
	/*
	sprintf_s(buf, "ll");//buf[2]=\0;buf[3]=l;
	renderbitmap(0, 10, GLUT_STROKE_ROMAN, buf);

	sprintf_s(buf, "ll");//buf[2]=\0;buf[3]=l;
	renderbitmap(0, 0, GLUT_STROKE_ROMAN, buf);

	sprintf_s(buf, "ll");//buf[2]=\0;buf[3]=l;
	renderbitmap(0, -20, GLUT_STROKE_ROMAN, buf);*/

}



void display() {
	introscreen();
	glFlush();

}
//Called when the window is resized
void handleResize(int w, int h) {
	//Tell OpenGL how to convert from coordinates to pixel values
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION); //Switch to setting the camera perspective

								 //Set the camera perspective
	glLoadIdentity(); //Reset the camera
	gluPerspective(45.0,                  //The camera angle
		(double)w / (double)h, //The width-to-height ratio
		1.0,                   //The near z clipping coordinate
		200.0);                //The far z clipping coordinate
}


int main(int arg, char **argv) {
	//Initialize GLUT
	glutInit(&arg, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(400, 400);
	glutInitWindowPosition(30, 30);
	glColor3f(0.0f, 0.0f, 0.0f);
	glutCreateWindow("print_text");
	init();
	glutDisplayFunc(display);
	//glutReshapeFunc(handleResize);
	glutMainLoop();
	return 0;
}